<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Transport.Msmq</name>
    </assembly>
    <members>
        <member name="M:NServiceBus.Transport.Msmq.CheckMachineNameForCompliance.Check">
            <summary>
            Checks to see if the NetBios computer name exceeds 15 characters and if so throws an exception.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.Msmq.HeaderInfo">
            <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.Msmq.HeaderInfo.Key">
            <summary>
            The key used to lookup the value in the header collection.
            </summary>
        </member>
        <member name="P:NServiceBus.Transport.Msmq.HeaderInfo.Value">
            <summary>
            The value stored under the key in the header collection.
            </summary>
        </member>
        <member name="T:NServiceBus.Transport.Msmq.MessageQueueExtensions">
            <summary>
            Reads the Access Control Entries (ACE) from an MSMQ queue.
            </summary>
            <remarks>
            There is no managed API for reading the queue permissions, this has to be done via P/Invoke. by calling
            <c>MQGetQueueSecurity</c> API.
            See http://stackoverflow.com/questions/10177255/how-to-get-the-current-permissions-for-an-msmq-private-queue
            </remarks>
        </member>
        <member name="T:NServiceBus.EndpointInstanceExtensions">
            <summary>
            Provides MSMQ-specific extensions to routing.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointInstanceExtensions.AtMachine(NServiceBus.Routing.EndpointInstance,System.String)">
            <summary>
            Returns an endpoint instance bound to a given machine name.
            </summary>
            <param name="instance">A plain instance.</param>
            <param name="machineName">Machine name.</param>
        </member>
        <member name="T:NServiceBus.InstanceMappingFileSettings">
            <summary>
            Allows configuring file-based instance mappings.
            </summary>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Creates new instance of <see cref="T:NServiceBus.InstanceMappingFileSettings"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.RefreshInterval(System.TimeSpan)">
            <summary>
            Specifies the interval between data refresh attempts.
            The default value is 30 seconds.
            </summary>
            <param name="refreshInterval">Refresh interval. Valid values must be between 1 second and less than 1 day.</param>
        </member>
        <member name="M:NServiceBus.InstanceMappingFileSettings.FilePath(System.String)">
            <summary>
            Specifies the path and file name for the instance mapping XML. The default is <code>instance-mapping.xml</code>.
            </summary>
            <param name="filePath">The relative or absolute file path to the instance mapping XML file.</param>
        </member>
        <member name="T:NServiceBus.MsmqConfigurationExtensions">
            <summary>
            Adds extensions methods to <see cref="T:NServiceBus.TransportExtensions`1" /> for configuration purposes.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.ApplyLabelToMessages(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport},System.Func{System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String})">
            <summary>
            Set a delegate to use for applying the <see cref="P:System.Messaging.Message.Label" /> property when sending a message.
            </summary>
            <remarks>
            This delegate will be used for all valid messages sent via MSMQ.
            This includes, not just standard messages, but also Audits, Errors and all control messages.
            In some cases it may be useful to use the <see cref="F:NServiceBus.Headers.ControlMessageHeader" /> key to determine if a message is
            a control message.
            The only exception to this rule is received messages with corrupted headers. These messages will be forwarded to the
            error queue with no label applied.
            </remarks>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.TransactionScopeOptions(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport},System.Nullable{System.TimeSpan},System.Nullable{System.Transactions.IsolationLevel})">
            <summary>
            Allows to change the transaction isolation level and timeout for the `TransactionScope` used to receive messages.
            </summary>
            <remarks>
            If not specified the default transaction timeout of the machine will be used and the isolation level will be set to
            <see cref="F:System.Transactions.IsolationLevel.ReadCommitted"/>.
            </remarks>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.SetMessageDistributionStrategy(NServiceBus.RoutingSettings{NServiceBus.MsmqTransport},NServiceBus.Routing.DistributionStrategy)">
            <summary>
            Sets a distribution strategy for a given endpoint.
            </summary>
            <param name="config">Config object.</param>
            <param name="distributionStrategy">The instance of a distribution strategy.</param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.InstanceMappingFile(NServiceBus.RoutingSettings{NServiceBus.MsmqTransport})">
            <summary>
            Returns the configuration options for the file based instance mapping file.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.UseDeadLetterQueueForMessagesWithTimeToBeReceived(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            Moves messages that have exceeded their TimeToBeReceived to the dead letter queue instead of discarding them.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.DisableInstaller(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            Disables the automatic queue creation when installers are enabled using `EndpointConfiguration.EnableInstallers()`.
            </summary>
            <remarks>
            With installers enabled, required queues will be created automatically at startup.While this may be convenient for development,
            we instead recommend that queues are created as part of deployment using the CreateQueues.ps1 script included in the NuGet package.
            The installers might still need to be enabled to fulfill the installation needs of other components, but this method allows
            scripts to be used for queue creation instead.
            </remarks>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.DisableDeadLetterQueueing(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            This setting should be used with caution. It disables the storing of undeliverable messages
            in the dead letter queue. Therefore this setting must only be used where loss of messages 
            is an acceptable scenario. 
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.DisableConnectionCachingForSends(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            Instructs MSMQ to cache connections to a remote queue and re-use them
            as needed instead of creating new connections for each message. 
            Turning connection caching off will negatively impact the message throughput in 
            most scenarios.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.UseNonTransactionalQueues(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            This setting should be used with caution. As the queues are not transactional, any message that has
            an exception during processing will not be rolled back to the queue. Therefore this setting must only
            be used where loss of messages is an acceptable scenario.  
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.EnableJournaling(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport})">
            <summary>
            Enables the use of journaling messages. Stores a copy of every message received in the journal queue. 
            Should be used ONLY when debugging as it can 
            potentially use up the MSMQ journal storage quota based on the message volume.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.MsmqConfigurationExtensions.TimeToReachQueue(NServiceBus.TransportExtensions{NServiceBus.MsmqTransport},System.TimeSpan)">
            <summary>
            Overrides the TTRQ timespan. The default value if not set is Message.InfiniteTimeout
            </summary>
            <param name="config"></param>
            <param name="timeToReachQueue">Timespan for the TTRQ</param>
        </member>
        <member name="T:NServiceBus.MsmqTransport">
            <summary>
            Transport definition for MSMQ.
            </summary>
        </member>
        <member name="P:NServiceBus.MsmqTransport.ExampleConnectionStringForErrorMessage">
            <summary>
            <see cref="P:NServiceBus.Transport.TransportDefinition.ExampleConnectionStringForErrorMessage" />.
            </summary>
        </member>
        <member name="P:NServiceBus.MsmqTransport.RequiresConnectionString">
            <summary>
            <see cref="P:NServiceBus.Transport.TransportDefinition.RequiresConnectionString" />.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqTransport.Initialize(NServiceBus.Settings.SettingsHolder,System.String)">
            <summary>
            Initializes the transport infrastructure for msmq.
            </summary>
            <param name="settings">The settings.</param>
            <param name="connectionString">The connection string.</param>
            <returns>the transport infrastructure for msmq.</returns>
        </member>
        <member name="T:NServiceBus.MsmqPersistence">
            <summary>
            Used to enable Msmq persistence.
            </summary>
        </member>
        <member name="T:NServiceBus.MsmqSubscriptionStorageConfigurationExtensions">
            <summary>
            Provides configuration extensions when using <see cref="T:NServiceBus.MsmqPersistence"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqSubscriptionStorageConfigurationExtensions.SubscriptionQueue(NServiceBus.PersistenceExtensions{NServiceBus.MsmqPersistence},System.String)">
            <summary>
            Configures the queue used to store subscriptions.
            </summary>
            <param name="persistenceExtensions">The settings to extend.</param>
            <param name="queue">The queue name.</param>
        </member>
    </members>
</doc>
